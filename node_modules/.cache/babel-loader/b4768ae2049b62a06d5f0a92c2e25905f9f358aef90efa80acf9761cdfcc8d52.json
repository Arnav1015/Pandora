{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\New folder\\\\Pandora\\\\src\\\\components\\\\SpeechToText.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpeechRecognitionComponent = () => {\n  _s();\n  const [texts, setTexts] = useState([]);\n  const [recognition, setRecognition] = useState(null);\n  useEffect(() => {\n    const initializeSpeechRecognition = () => {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognition = new SpeechRecognition();\n      recognition.interimResults = true;\n      recognition.addEventListener('result', handleSpeechResult);\n      recognition.addEventListener('end', () => recognition.start());\n      setRecognition(recognition);\n    };\n    initializeSpeechRecognition();\n    return () => {\n      if (recognition) {\n        recognition.removeEventListener('result', handleSpeechResult);\n        recognition.removeEventListener('end', () => recognition.start());\n        recognition.stop();\n      }\n    };\n  }, []); // Only run this effect once when the component mounts\n\n  const handleSpeechResult = event => {\n    let newTexts = [...texts];\n    for (let i = 0; i < event.results.length; i++) {\n      const transcript = event.results[i][0].transcript;\n      newTexts.push(transcript);\n      if (event.results[i].isFinal) {\n        handleFinalTranscript(transcript);\n      }\n    }\n    setTexts(newTexts);\n  };\n  const handleFinalTranscript = text => {\n    if (text.includes('how are you')) {\n      addResponse('I am fine');\n    } else if (text.includes('what\\'s your name') || text.includes('what is your name')) {\n      addResponse('My Name is Pandora');\n    } else if (text.includes('open YouTube')) {\n      addResponse('Opening YouTube channel');\n      window.open('https://www.youtube.com');\n    }\n  };\n  const addResponse = response => {\n    setTexts(prevTexts => [...prevTexts, response]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"texts\",\n    children: texts.map((text, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: text\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechRecognitionComponent, \"Igi77fhILbga2vn/ubXZ1D3V81U=\");\n_c = SpeechRecognitionComponent;\nexport default SpeechRecognitionComponent;\nvar _c;\n$RefreshReg$(_c, \"SpeechRecognitionComponent\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","SpeechRecognitionComponent","_s","texts","setTexts","recognition","setRecognition","initializeSpeechRecognition","SpeechRecognition","window","webkitSpeechRecognition","interimResults","addEventListener","handleSpeechResult","start","removeEventListener","stop","event","newTexts","i","results","length","transcript","push","isFinal","handleFinalTranscript","text","includes","addResponse","open","response","prevTexts","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Desktop/New folder/Pandora/src/components/SpeechToText.jsx"],"sourcesContent":["\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst SpeechRecognitionComponent = () => {\r\n  const [texts, setTexts] = useState([]);\r\n  const [recognition, setRecognition] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const initializeSpeechRecognition = () => {\r\n      const SpeechRecognition =\r\n        window.SpeechRecognition || window.webkitSpeechRecognition;\r\n\r\n      const recognition = new SpeechRecognition();\r\n      recognition.interimResults = true;\r\n\r\n      recognition.addEventListener('result', handleSpeechResult);\r\n      recognition.addEventListener('end', () => recognition.start());\r\n\r\n      setRecognition(recognition);\r\n    };\r\n\r\n    initializeSpeechRecognition();\r\n\r\n    return () => {\r\n      if (recognition) {\r\n        recognition.removeEventListener('result', handleSpeechResult);\r\n        recognition.removeEventListener('end', () => recognition.start());\r\n        recognition.stop();\r\n      }\r\n    };\r\n  }, []); // Only run this effect once when the component mounts\r\n\r\n  const handleSpeechResult = (event) => {\r\n    let newTexts = [...texts];\r\n\r\n    for (let i = 0; i < event.results.length; i++) {\r\n      const transcript = event.results[i][0].transcript;\r\n      newTexts.push(transcript);\r\n\r\n      if (event.results[i].isFinal) {\r\n        handleFinalTranscript(transcript);\r\n      }\r\n    }\r\n\r\n    setTexts(newTexts);\r\n  };\r\n\r\n  const handleFinalTranscript = (text) => {\r\n    if (text.includes('how are you')) {\r\n      addResponse('I am fine');\r\n    } else if (text.includes('what\\'s your name') || text.includes('what is your name')) {\r\n      addResponse('My Name is Pandora');\r\n    } else if (text.includes('open YouTube')) {\r\n      addResponse('Opening YouTube channel');\r\n      window.open('https://www.youtube.com');\r\n    }\r\n  };\r\n\r\n  const addResponse = (response) => {\r\n    setTexts(prevTexts => [...prevTexts, response]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"texts\">\r\n      {texts.map((text, index) => (\r\n        <p key={index}>{text}</p>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpeechRecognitionComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}