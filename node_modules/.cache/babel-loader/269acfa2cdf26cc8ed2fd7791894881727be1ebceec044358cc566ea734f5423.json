{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\New folder\\\\Pandora\\\\src\\\\components\\\\SpeechToText.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpeechRecognitionComponent = () => {\n  _s();\n  const [texts, setTexts] = useState([]);\n  useEffect(() => {\n    const recognition = new window.SpeechRecognition();\n    recognition.interimResults = true;\n    recognition.addEventListener(\"result\", e => {\n      const text = Array.from(e.results).map(result => result[0]).map(result => result.transcript).join(\"\");\n      if (e.results[0].isFinal) {\n        let reply;\n        if (text.includes(\"how are you\")) {\n          reply = \"I am fine\";\n        } else if (text.includes(\"what's your name\") || text.includes(\"what is your name\")) {\n          reply = \"My Name is Pandora\";\n        } else if (text.includes(\"open YouTube\")) {\n          reply = \"opening youtube channel\";\n          window.open(\"https://www.youtube.com\");\n        }\n        setTexts(prevTexts => [...prevTexts, text, reply]);\n      } else {\n        setTexts(prevTexts => [...prevTexts, text]);\n      }\n    });\n    recognition.addEventListener(\"end\", () => {\n      recognition.start();\n    });\n    recognition.start();\n    return () => {\n      recognition.removeEventListener(\"result\");\n      recognition.removeEventListener(\"end\");\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Speech Recognition\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Available In Chrome Only\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"texts\",\n        children: texts.map((text, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechRecognitionComponent, \"PsTkS3oI37JabbNh0gpvNVK96jk=\");\n_c = SpeechRecognitionComponent;\nexport default SpeechRecognitionComponent;\nvar _c;\n$RefreshReg$(_c, \"SpeechRecognitionComponent\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","SpeechRecognitionComponent","_s","texts","setTexts","recognition","window","SpeechRecognition","interimResults","addEventListener","e","text","Array","from","results","map","result","transcript","join","isFinal","reply","includes","open","prevTexts","start","removeEventListener","children","fileName","_jsxFileName","lineNumber","columnNumber","className","index","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Desktop/New folder/Pandora/src/components/SpeechToText.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst SpeechRecognitionComponent = () => {\r\n  const [texts, setTexts] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    const recognition = new window.SpeechRecognition();\r\n    recognition.interimResults = true;\r\n\r\n    recognition.addEventListener(\"result\", (e) => {\r\n      const text = Array.from(e.results)\r\n        .map((result) => result[0])\r\n        .map((result) => result.transcript)\r\n        .join(\"\");\r\n\r\n      if (e.results[0].isFinal) {\r\n        let reply;\r\n        if (text.includes(\"how are you\")) {\r\n          reply = \"I am fine\";\r\n        } else if (\r\n          text.includes(\"what's your name\") ||\r\n          text.includes(\"what is your name\")\r\n        ) {\r\n          reply = \"My Name is Pandora\";\r\n        } else if (text.includes(\"open YouTube\")) {\r\n          reply = \"opening youtube channel\";\r\n          window.open(\"https://www.youtube.com\");\r\n        }\r\n\r\n        setTexts(prevTexts => [...prevTexts, text, reply]);\r\n      } else {\r\n        setTexts(prevTexts => [...prevTexts, text]);\r\n      }\r\n    });\r\n\r\n    recognition.addEventListener(\"end\", () => {\r\n      recognition.start();\r\n    });\r\n\r\n    recognition.start();\r\n\r\n    return () => {\r\n      recognition.removeEventListener(\"result\");\r\n      recognition.removeEventListener(\"end\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <section>\r\n      <h1>Speech Recognition</h1>\r\n      <p>Available In Chrome Only</p>\r\n      <div className=\"container\">\r\n        <div className=\"texts\">\r\n          {texts.map((text, index) => (\r\n            <p key={index}>{text}</p>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default SpeechRecognitionComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}